{"version":3,"sources":["calculadora.service.js","calculadora.js","serviceWorker.js","index.js"],"names":["CalculadoraService","SOMA","SUBTRACAO","DIVISAO","MULTIPLICACAO","numero1","numero2","operacao","resultado","numAtual","numConcat","indexOf","Calculadora","calcular","concatenarNumero","useState","txtNumeros","setTxtNumeros","setNumero1","setNumero2","setOperacao","adicionarNumero","numero","definirOperacao","op","parseFloat","toString","Jumbotron","style","background","backgroundColor","padding","margin","width","Container","Row","Col","xs","Button","variant","onClick","Form","Control","type","name","className","readOnly","value","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a46a8a13.chunk.js","sourcesContent":["function CalculadoraService() {\n\n  const SOMA = '+';\n  const SUBTRACAO = '-';\n  const DIVISAO = '/';\n  const MULTIPLICACAO = '*';\n\n  function calcular(numero1, numero2, operacao) {\n    let resultado;\n\n    switch(operacao) {\n      case SOMA:\n        resultado = numero1 + numero2;\n        break;\n      case SUBTRACAO:\n        resultado = numero1 - numero2;\n        break;\n      case DIVISAO:\n        resultado = numero1 / numero2;\n        break;\n      case MULTIPLICACAO:\n        resultado = numero1 * numero2;\n        break;\n      default:\n        resultado = 0;\n    }\n\n    return resultado;\n  }\n\n  function concatenarNumero(numAtual, numConcat) {\n    // caso contenha apenas '0' ou null, reinicia o valor\n    if (numAtual === '0' || numAtual === null) {\n      numAtual = '';\n    }\n\n    // primeiro dígito for '.', concatena '0' antes do ponto\n    if (numConcat === '.' && numAtual === '') {\n      return '0.';\n    }\n\n    // caso '.' digitado e já contenha um ponto, apenas retornar\n    if (numConcat === '.' && numAtual.indexOf('.') > -1) {\n      return numAtual;\n    }\n\n    return numAtual + numConcat;\n  }\n\n  return [\n    calcular,\n    concatenarNumero,\n    SOMA,\n    SUBTRACAO,\n    DIVISAO,\n    MULTIPLICACAO\n  ];\n\n}\n\nexport default CalculadoraService;\n","import React, { useState } from 'react';\nimport './calculadora.css';\nimport {\n  Jumbotron, Container, Row, Col, Button, Form\n} from 'react-bootstrap';\nimport CalculadoraService from './calculadora.service';\n\nfunction Calculadora() {\n\n  const [calcular, concatenarNumero, SOMA, SUBTRACAO, DIVISAO, MULTIPLICACAO] = CalculadoraService();\n\n  const [txtNumeros, setTxtNumeros] = useState('0');\n  const [numero1, setNumero1] = useState('0');\n  const [numero2, setNumero2] = useState(null);\n  const [operacao, setOperacao] = useState(null);\n\n  function adicionarNumero(numero) {\n    let resultado;\n    if (operacao === null) {\n      resultado = concatenarNumero(numero1, numero);\n      setNumero1(resultado);\n    } else {\n      resultado = concatenarNumero(numero2, numero);\n      setNumero2(resultado);\n    }\n    setTxtNumeros(resultado);\n  }\n\n  function definirOperacao(op) {\n    // apenas define a operação caso ela não exista\n    if (operacao === null) {\n      setOperacao(op);\n      return;\n    }\n    // caso operação estiver definida e número 2 selecionado, realiza o cálculo da operação\n    if (numero2 !== null) {\n      const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n      setOperacao(op);\n      setNumero1(resultado.toString());\n      setNumero2(null);\n      setTxtNumeros(resultado.toString());\n    }\n  }\n\n  function acaoCalcular() {\n    if (numero2 === null) {\n      return;\n    }\n    const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n    setTxtNumeros(resultado);\n  }\n\n  function limpar() {\n    setTxtNumeros('0');\n    setNumero1('0');\n    setNumero2(null);\n    setOperacao(null);\n  }\n\n  return (\n    <Jumbotron style={{\n      background: 'transparent !important',\n      backgroundColor: '#007bff',\n      padding: '5px',\n      margin: '5px',\n      width: '400px'\n    }}>\n      <Container>\n        <Row>\n          <Col xs=\"3\">\n            <Button variant=\"danger\"\n              onClick={limpar}>C</Button>\n          </Col>\n          <Col xs=\"9\">\n            <Form.Control type=\"text\"\n              name=\"txtNumeros\"\n              className=\"text-right\"\n              readOnly=\"readonly\"\n              value={txtNumeros}\n              data-testid=\"txtNumeros\" />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('7')}>7</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('8')}>8</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('9')}>9</Button>\n          </Col>\n          <Col>\n            <Button variant=\"warning\"\n              onClick={() => definirOperacao(DIVISAO)}>/</Button>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('4')}>4</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('5')}>5</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('6')}>6</Button>\n          </Col>\n          <Col>\n            <Button variant=\"warning\"\n              onClick={() => definirOperacao(MULTIPLICACAO)}>*</Button>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('1')}>1</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('2')}>2</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('3')}>3</Button>\n          </Col>\n          <Col>\n            <Button variant=\"warning\"\n              onClick={() => definirOperacao(SUBTRACAO)}>-</Button>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('0')}>0</Button>\n          </Col>\n          <Col>\n            <Button variant=\"light\"\n              onClick={() => adicionarNumero('.')}>.</Button>\n          </Col>\n          <Col>\n            <Button variant=\"success\"\n              onClick={acaoCalcular}>=</Button>\n          </Col>\n          <Col>\n            <Button variant=\"warning\"\n              onClick={() => definirOperacao(SOMA)}>+</Button>\n          </Col>\n        </Row>\n\n      </Container>\n    </Jumbotron>\n  );\n}\n\nexport default Calculadora;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculadora from './calculadora';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<Calculadora />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}